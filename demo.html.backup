<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Harv v2.0 - AI Tutoring System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            background: #fafafa;
            color: #1a1a1a;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        .header {
            background: white;
            border-bottom: 1px solid #e5e5e5;
            padding: 20px 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5em;
            font-weight: 600;
            color: #2563eb;
        }

        .header-nav {
            display: flex;
            gap: 30px;
            align-items: center;
        }

        .header-nav a {
            text-decoration: none;
            color: #666;
            font-weight: 500;
            transition: color 0.2s ease;
        }

        .header-nav a:hover {
            color: #2563eb;
        }

        .demo-btn {
            background: #2563eb;
            color: white;
            padding: 8px 16px;
            border-radius: 6px;
            text-decoration: none;
            font-weight: 500;
            transition: background 0.2s ease;
        }

        .demo-btn:hover {
            background: #1d4ed8;
        }

        /* Auth Section */
        .auth-section {
            background: white;
            padding: 80px 0;
            text-align: center;
        }

        .auth-container {
            max-width: 400px;
            margin: 0 auto;
            background: white;
            padding: 40px;
            border-radius: 12px;
            border: 1px solid #e5e5e5;
            box-shadow: 0 4px 6px rgba(0,0,0,0.07);
        }

        .auth-title {
            font-size: 1.8em;
            font-weight: 600;
            margin-bottom: 30px;
            color: #1a1a1a;
        }

        .auth-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .form-group {
            text-align: left;
        }

        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #374151;
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 1em;
            outline: none;
            transition: border-color 0.2s ease;
        }

        .form-input:focus {
            border-color: #2563eb;
        }

        .auth-btn {
            background: #2563eb;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 1em;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s ease;
        }

        .auth-btn:hover {
            background: #1d4ed8;
        }

        .auth-btn:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }

        .auth-switch {
            margin-top: 20px;
            color: #666;
            font-size: 0.9em;
        }

        .auth-switch a {
            color: #2563eb;
            text-decoration: none;
            font-weight: 500;
        }

        .auth-switch a:hover {
            text-decoration: underline;
        }

        .error-message {
            background: #fef2f2;
            border: 1px solid #fecaca;
            color: #dc2626;
            padding: 10px 15px;
            border-radius: 6px;
            font-size: 0.9em;
            margin-bottom: 20px;
        }

        /* Hero Section */
        .hero {
            background: white;
            padding: 80px 0;
            text-align: center;
        }

        .hero-title {
            font-size: 3.5em;
            font-weight: 700;
            margin-bottom: 20px;
            color: #1a1a1a;
        }

        .hero-subtitle {
            font-size: 1.3em;
            color: #666;
            margin-bottom: 40px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

        .hero-cta {
            background: #2563eb;
            color: white;
            padding: 15px 30px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 600;
            font-size: 1.1em;
            display: inline-block;
            transition: all 0.2s ease;
        }

        .hero-cta:hover {
            background: #1d4ed8;
            transform: translateY(-1px);
        }

        /* Tab Navigation */
        .tab-nav {
            background: white;
            border-bottom: 1px solid #e5e5e5;
            padding: 0 20px;
            overflow-x: auto;
        }

        .tab-nav-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            gap: 0;
        }

        .tab-btn {
            background: none;
            border: none;
            padding: 15px 25px;
            cursor: pointer;
            font-size: 0.95em;
            font-weight: 500;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.2s ease;
            white-space: nowrap;
        }

        .tab-btn:hover {
            color: #2563eb;
            background: #f8fafc;
        }

        .tab-btn.active {
            color: #2563eb;
            border-bottom-color: #2563eb;
            background: #f8fafc;
        }

        /* Tab Content */
        .tab-content {
            display: none;
            padding: 40px 0;
            min-height: 600px;
        }

        .tab-content.active {
            display: block;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #f3f4f6;
            border-top: 3px solid #2563eb;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Dashboard Tab */
        .dashboard-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .module-card {
            background: white;
            border: 1px solid #e5e5e5;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .module-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
        }

        .module-icon {
            width: 50px;
            height: 50px;
            background: #f0f7ff;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5em;
        }

        .module-title {
            font-size: 1.4em;
            font-weight: 600;
            color: #1a1a1a;
        }

        .module-desc {
            color: #666;
            margin-bottom: 25px;
            line-height: 1.5;
        }

        .progress-section {
            margin-bottom: 25px;
        }

        .progress-label {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
        }

        .progress-bar {
            background: #f3f4f6;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            background: #2563eb;
            height: 100%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .objectives-list {
            margin-bottom: 25px;
        }

        .objective-item {
            padding: 8px 0;
            display: flex;
            align-items: center;
            color: #666;
            font-size: 0.95em;
        }

        .objective-item.completed {
            color: #059669;
        }

        .objective-item.in-progress {
            color: #2563eb;
        }

        .continue-btn {
            background: #2563eb;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s ease;
            width: 100%;
        }

        .continue-btn:hover {
            background: #1d4ed8;
        }

        .stats-card {
            background: white;
            border: 1px solid #e5e5e5;
            border-radius: 12px;
            padding: 25px;
        }

        .stats-title {
            font-weight: 600;
            margin-bottom: 20px;
            color: #1a1a1a;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #f3f4f6;
        }

        .stat-item:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

        .stat-label {
            color: #666;
            font-size: 0.9em;
        }

        .stat-value {
            font-weight: 600;
            color: #1a1a1a;
        }

        /* Status indicators */
        .status-indicator {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-indicator.real-data {
            background: #dcfce7;
            color: #166534;
        }

        .status-indicator.calculating {
            background: #fef3c7;
            color: #92400e;
        }

        /* Chat Tab */
        .chat-container {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 30px;
            height: 600px;
        }

        .chat-section {
            background: white;
            border: 1px solid #e5e5e5;
            border-radius: 12px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-header {
            padding: 20px;
            border-bottom: 1px solid #e5e5e5;
            background: #f8fafc;
        }

        .chat-title {
            font-weight: 600;
            color: #1a1a1a;
        }

        .chat-subtitle {
            color: #666;
            font-size: 0.9em;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .message {
            margin-bottom: 20px;
            padding: 15px 20px;
            border-radius: 12px;
            max-width: 85%;
            line-height: 1.5;
        }

        .message.ai {
            background: #f8fafc;
            border: 1px solid #e5e5e5;
            margin-right: auto;
        }

        .message.user {
            background: #2563eb;
            color: white;
            margin-left: auto;
        }

        .chat-input {
            padding: 20px;
            border-top: 1px solid #e5e5e5;
            background: #f8fafc;
        }

        .input-row {
            display: flex;
            gap: 10px;
        }

        .chat-input-field {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.95em;
            outline: none;
            transition: border-color 0.2s ease;
        }

        .chat-input-field:focus {
            border-color: #2563eb;
        }

        .send-btn {
            background: #2563eb;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: background 0.2s ease;
        }

        .send-btn:hover {
            background: #1d4ed8;
        }

        /* Memory Panel */
        .memory-panel {
            background: white;
            border: 1px solid #e5e5e5;
            border-radius: 12px;
            padding: 20px;
        }

        .memory-title {
            font-weight: 600;
            margin-bottom: 20px;
            color: #1a1a1a;
            text-align: center;
        }

        .memory-layer {
            background: #f8fafc;
            border: 1px solid #e5e5e5;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid #2563eb;
        }

        .layer-title {
            font-weight: 600;
            font-size: 0.85em;
            color: #1a1a1a;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .layer-content {
            font-size: 0.85em;
            color: #666;
            line-height: 1.4;
        }

        /* Memory Tab */
        .memory-visualization {
            background: white;
            border: 1px solid #e5e5e5;
            border-radius: 12px;
            padding: 30px;
        }

        .memory-viz-title {
            font-size: 1.3em;
            font-weight: 600;
            margin-bottom: 20px;
            text-align: center;
            color: #1a1a1a;
        }

        .layer-detailed {
            border: 1px solid #e5e5e5;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background: #f8fafc;
        }

        .layer-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }

        .layer-number {
            background: #2563eb;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.9em;
        }

        .layer-detailed-title {
            font-weight: 600;
            color: #1a1a1a;
        }

        .layer-detailed-content {
            color: #666;
            line-height: 1.5;
        }

        /* Progress Tab */
        .progress-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .progress-card {
            background: white;
            border: 1px solid #e5e5e5;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
        }

        .progress-number {
            font-size: 2.5em;
            font-weight: 700;
            color: #2563eb;
            margin-bottom: 10px;
        }

        .progress-label-large {
            color: #666;
            font-weight: 500;
        }

        .detailed-progress {
            background: white;
            border: 1px solid #e5e5e5;
            border-radius: 12px;
            padding: 30px;
        }

        .detailed-title {
            font-size: 1.2em;
            font-weight: 600;
            margin-bottom: 20px;
            color: #1a1a1a;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .hero-title {
                font-size: 2.5em;
            }

            .dashboard-grid,
            .chat-container {
                grid-template-columns: 1fr;
            }

            .memory-panel {
                margin-top: 20px;
            }

            .tab-nav-container {
                padding: 0 10px;
            }

            .tab-btn {
                padding: 15px 20px;
                font-size: 0.9em;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">🧠 Harv v2.0</div>
                <nav class="header-nav">
                    <a href="#features">Features</a>
                    <a href="#about">About</a>
                    <a href="#contact">Contact</a>
                    <a href="#demo" class="demo-btn" id="demo-btn" onclick="showAuth()">Try Demo</a>
                    <button class="demo-btn" id="logout-btn" onclick="logout()" style="display: none;">Logout</button>
                </nav>
            </div>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero" id="hero-section">
        <div class="container">
            <h1 class="hero-title">Intelligent AI Tutoring</h1>
            <p class="hero-subtitle">Advanced 4-layer memory architecture meets Socratic teaching methodology for personalized learning that actually works.</p>
            <a href="#demo" class="hero-cta" onclick="showAuth()">Experience the Demo</a>
        </div>
    </section>

    <!-- Authentication Section -->
    <section class="auth-section" id="auth-section" style="display: none;">
        <div class="container">
            <div class="auth-container">
                <h2 class="auth-title" id="auth-title">Login to Demo</h2>
                <div id="error-message" class="error-message" style="display: none;"></div>
                
                <form class="auth-form" id="auth-form">
                    <div class="form-group" id="name-group" style="display: none;">
                        <label class="form-label" for="name">Full Name</label>
                        <input class="form-input" type="text" id="name" placeholder="Enter your full name">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="email">Email</label>
                        <input class="form-input" type="email" id="email" placeholder="Enter your email" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="password">Password</label>
                        <input class="form-input" type="password" id="password" placeholder="Enter your password" required>
                    </div>
                    
                    <button type="submit" class="auth-btn" id="auth-btn">Login</button>
                </form>
                
                <div class="auth-switch">
                    <span id="auth-switch-text">Don't have an account?</span>
                    <a href="#" id="auth-switch-link" onclick="toggleAuthMode()">Sign up</a>
                </div>
                
                <!-- Demo credentials -->
                <div style="margin-top: 30px; padding: 20px; background: #f8fafc; border-radius: 8px; border: 1px solid #e5e5e5;">
                    <h4 style="margin-bottom: 10px; color: #1a1a1a;">Demo Credentials:</h4>
                    <p style="color: #666; font-size: 0.9em; margin-bottom: 5px;"><strong>Email:</strong> demo@harv.com</p>
                    <p style="color: #666; font-size: 0.9em;"><strong>Password:</strong> demo123</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Tab Navigation -->
    <div class="tab-nav" id="tab-nav" style="display: none;">
        <div class="tab-nav-container">
            <button class="tab-btn active" onclick="showTab('dashboard')">Dashboard</button>
            <button class="tab-btn" onclick="showTab('chat')">Learning Session</button>
            <button class="tab-btn" onclick="showTab('memory')">Memory System</button>
            <button class="tab-btn" onclick="showTab('progress')">Progress Analytics</button>
        </div>
    </div>

    <!-- Tab Content -->
    <div class="container">

        <!-- Dashboard Tab -->
        <div id="dashboard-tab" class="tab-content active" style="display: none;">
            <div class="loading" id="dashboard-loading">
                <div class="loading-spinner"></div>
                <p>Loading your learning modules and progress...</p>
            </div>
            
            <div id="dashboard-content" style="display: none;">
                <div class="dashboard-grid">
                    <div class="module-card" id="module-card">
                        <!-- Module content will be loaded here -->
                    </div>

                    <div class="stats-card" id="stats-card">
                        <!-- Stats content will be loaded here -->
                    </div>
                </div>

                <div style="background: #f8fafc; border: 1px solid #e5e5e5; border-radius: 12px; padding: 25px; text-align: center;">
                    <span class="status-indicator real-data">Real Database Data</span>
                    <p style="color: #666; margin: 10px 0;">All progress metrics calculated from actual conversations and learning interactions.</p>
                    <h4 style="color: #1a1a1a; margin: 0;">14 Additional Communication Modules Coming Soon</h4>
                </div>
            </div>
        </div>

        <!-- Chat Tab -->
        <div id="chat-tab" class="tab-content">
            <div class="chat-container">
                <div class="chat-section">
                    <div class="chat-header">
                        <h4 class="chat-title">Learning Session: <span id="chat-module-title">Loading...</span></h4>
                        <p class="chat-subtitle">AI tutor with 4-layer memory system</p>
                    </div>

                    <div class="chat-messages" id="chat-messages">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <p>Initializing enhanced memory system...</p>
                        </div>
                    </div>

                    <div class="chat-input">
                        <div class="input-row">
                            <input type="text" class="chat-input-field" id="chat-input" placeholder="Type your response..." disabled />
                            <button class="send-btn" id="send-btn" onclick="sendMessage()" disabled>Send</button>
                        </div>
                    </div>
                </div>

                <div class="memory-panel" id="memory-panel">
                    <h4 class="memory-title">4-Layer Memory System</h4>
                    <div id="memory-layers">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <p>Loading memory layers...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Memory System Tab -->
        <div id="memory-tab" class="tab-content">
            <div class="memory-visualization">
                <h3 class="memory-viz-title">Enhanced 4-Layer Memory Architecture 
                    <span class="status-indicator real-data">Live Data</span>
                </h3>

                <div id="memory-detailed-view">
                    <div class="loading">
                        <div class="loading-spinner"></div>
                        <p>Loading memory system visualization...</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Tab -->
        <div id="progress-tab" class="tab-content">
            <div class="loading" id="progress-loading">
                <div class="loading-spinner"></div>
                <p>Calculating progress from your learning conversations...</p>
            </div>
            
            <div id="progress-content" style="display: none;">
                <div class="progress-overview" id="progress-overview">
                    <!-- Progress cards will be loaded here -->
                </div>

                <div class="detailed-progress" id="detailed-progress">
                    <!-- Detailed progress will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global state
        let currentUser = null;
        let currentModule = null;
        let authToken = null;
        let isLoginMode = true;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            // Check for existing auth token
            authToken = localStorage.getItem('authToken');
            if (authToken) {
                // Try to validate token and show dashboard
                validateTokenAndShowDashboard();
            }
        });

        // API Configuration
        const API_BASE = 'http://localhost:8000/api/v1';

        // Authentication Functions
        function showAuth() {
            document.getElementById('hero-section').style.display = 'none';
            document.getElementById('auth-section').style.display = 'block';
            document.getElementById('auth-section').scrollIntoView({ behavior: 'smooth' });
        }

        function toggleAuthMode() {
            isLoginMode = !isLoginMode;
            const title = document.getElementById('auth-title');
            const btn = document.getElementById('auth-btn');
            const switchText = document.getElementById('auth-switch-text');
            const switchLink = document.getElementById('auth-switch-link');
            const nameGroup = document.getElementById('name-group');

            if (isLoginMode) {
                title.textContent = 'Login to Demo';
                btn.textContent = 'Login';
                switchText.textContent = "Don't have an account?";
                switchLink.textContent = 'Sign up';
                nameGroup.style.display = 'none';
            } else {
                title.textContent = 'Create Account';
                btn.textContent = 'Sign Up';
                switchText.textContent = 'Already have an account?';
                switchLink.textContent = 'Login';
                nameGroup.style.display = 'block';
            }
        }

        async function handleAuth(event) {
            event.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const name = document.getElementById('name').value;
            const btn = document.getElementById('auth-btn');
            const errorMsg = document.getElementById('error-message');

            btn.disabled = true;
            btn.textContent = isLoginMode ? 'Logging in...' : 'Creating Account...';
            errorMsg.style.display = 'none';

            try {
                const endpoint = isLoginMode ? '/login' : '/register';
                const payload = isLoginMode ? { email, password } : { email, password, name };

                const response = await fetch(`${API_BASE}${endpoint}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                const data = await response.json();

                if (response.ok) {
                    authToken = data.access_token;
                    currentUser = { 
                        id: data.user_id, 
                        name: data.name, 
                        email: data.email 
                    };
                    
                    localStorage.setItem('authToken', authToken);
                    localStorage.setItem('currentUser', JSON.stringify(currentUser));
                    
                    showDashboard();
                } else {
                    showError(data.detail || 'Authentication failed');
                }
            } catch (error) {
                console.error('Auth error:', error);
                showError('Connection error. Please try again.');
            } finally {
                btn.disabled = false;
                btn.textContent = isLoginMode ? 'Login' : 'Sign Up';
            }
        }

        function showError(message) {
            const errorMsg = document.getElementById('error-message');
            errorMsg.textContent = message;
            errorMsg.style.display = 'block';
        }

        async function validateTokenAndShowDashboard() {
            try {
                const response = await fetch(`${API_BASE}/me`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                if (response.ok) {
                    const userData = await response.json();
                    currentUser = userData;
                    showDashboard();
                } else {
                    // Token invalid
                    localStorage.removeItem('authToken');
                    localStorage.removeItem('currentUser');
                    authToken = null;
                }
            } catch (error) {
                console.error('Token validation error:', error);
            }
        }

        function showDashboard() {
            // Hide auth sections
            document.getElementById('hero-section').style.display = 'none';
            document.getElementById('auth-section').style.display = 'none';
            
            // Show dashboard
            document.getElementById('tab-nav').style.display = 'block';
            document.getElementById('dashboard-tab').style.display = 'block';
            
            // Update header
            document.getElementById('demo-btn').style.display = 'none';
            document.getElementById('logout-btn').style.display = 'inline-block';
            
            // Load dashboard data
            loadDashboard();
            
            // Scroll to dashboard
            document.getElementById('tab-nav').scrollIntoView({ behavior: 'smooth' });
        }

        function logout() {
            localStorage.removeItem('authToken');
            localStorage.removeItem('currentUser');
            authToken = null;
            currentUser = null;
            
            // Reset UI
            document.getElementById('demo-btn').style.display = 'inline-block';
            document.getElementById('logout-btn').style.display = 'none';
            document.getElementById('tab-nav').style.display = 'none';
            document.getElementById('dashboard-tab').style.display = 'none';
            document.getElementById('hero-section').style.display = 'block';
            
            // Reset forms
            document.getElementById('email').value = '';
            document.getElementById('password').value = '';
            document.getElementById('name').value = '';
            
            // Scroll to top
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // Dashboard Functions
        async function loadDashboard() {
            try {
                const response = await fetch(`${API_BASE}/modules/`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                if (response.ok) {
                    const modules = await response.json();
                    currentModule = modules[0]; // Use first module
                    displayModule(currentModule);
                    
                    // Hide loading, show content
                    document.getElementById('dashboard-loading').style.display = 'none';
                    document.getElementById('dashboard-content').style.display = 'block';
                } else {
                    throw new Error('Failed to load modules');
                }
            } catch (error) {
                console.error('Dashboard loading error:', error);
                document.getElementById('dashboard-loading').innerHTML = `
                    <p style="color: #dc2626;">Failed to load dashboard data</p>
                    <button onclick="loadDashboard()" style="margin-top: 10px; padding: 8px 16px; background: #2563eb; color: white; border: none; border-radius: 4px; cursor: pointer;">Retry</button>
                `;
            }
        }

        function displayModule(module) {
            const progress = module.user_progress;
            const objectives = module.learning_objectives;

            // Create module card HTML
            const moduleCard = document.getElementById('module-card');
            moduleCard.innerHTML = `
                <div class="module-header">
                    <div class="module-icon">📱</div>
                    <div>
                        <h3 class="module-title">${module.title}</h3>
                        <p style="color: #666; margin: 0;">${module.description}</p>
                    </div>
                </div>

                <p class="module-desc">
                    ${module.description}
                </p>

                <div class="progress-section">
                    <div class="progress-label">
                        <span>Learning Progress: ${progress.completion_percentage.toFixed(1)}% Complete</span>
                        <span class="status-indicator real-data">Real Data</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progress.completion_percentage}%"></div>
                    </div>
                </div>

                <div class="objectives-list">
                    ${objectives.map((obj, index) => {
                        let status = 'objective-item';
                        let icon = '○';
                        
                        if (index < progress.objectives_completed) {
                            status += ' completed';
                            icon = '✓';
                        } else if (index === progress.objectives_completed) {
                            status += ' in-progress';
                            icon = '◐';
                        }
                        
                        return `<div class="${status}">${icon} ${obj}</div>`;
                    }).join('')}
                </div>

                <button class="continue-btn" onclick="showTab('chat')">Continue Learning</button>
            `;

            // Create stats card
            const statsCard = document.getElementById('stats-card');
            statsCard.innerHTML = `
                <h4 class="stats-title">Learning Stats 
                    <span class="status-indicator real-data">Live</span>
                </h4>
                <div class="stat-item">
                    <span class="stat-label">Time Spent</span>
                    <span class="stat-value">${progress.time_spent_minutes} min</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Messages</span>
                    <span class="stat-value">${progress.messages_count}</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Conversations</span>
                    <span class="stat-value">${progress.conversations_count}</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Concepts Learned</span>
                    <span class="stat-value">${progress.objectives_completed} of ${progress.total_objectives}</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Mastery Level</span>
                    <span class="stat-value" style="text-transform: capitalize;">${progress.mastery_level}</span>
                </div>
            `;
        }

        // Tab Functions
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });

            // Remove active from all buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });

            // Show selected tab
            document.getElementById(tabName + '-tab').classList.add('active');

            // Add active to clicked button
            event.target.classList.add('active');

            // Load tab-specific data
            if (tabName === 'chat') {
                loadChatInterface();
            } else if (tabName === 'memory') {
                loadMemorySystem();
            } else if (tabName === 'progress') {
                loadProgressAnalytics();
            }
        }

        // Chat Functions
        async function loadChatInterface() {
            if (!currentModule) return;

            try {
                // Load memory context
                const memoryResponse = await fetch(`${API_BASE}/memory/enhanced/${currentModule.id}`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                if (memoryResponse.ok) {
                    const memoryData = await response.json();
                    displayMemoryLayers(memoryData);
                    
                    // Initialize chat
                    document.getElementById('chat-module-title').textContent = currentModule.title;
                    document.getElementById('chat-input').disabled = false;
                    document.getElementById('send-btn').disabled = false;
                    
                    // Display initial message
                    displayInitialChatMessage();
                }
            } catch (error) {
                console.error('Chat loading error:', error);
            }
        }

        function displayMemoryLayers(memoryData) {
            const memoryPanel = document.getElementById('memory-layers');
            
            // Display the 4 memory layers
            memoryPanel.innerHTML = `
                <div class="memory-layer">
                    <div class="layer-title">User Profile</div>
                    <div class="layer-content">${memoryData.memory_layers.system_data.user_profile || 'Learning style preferences loaded from database'}</div>
                </div>

                <div class="memory-layer">
                    <div class="layer-title">Module Context</div>
                    <div class="layer-content">Module ${currentModule.id}: ${currentModule.title} • ${currentModule.difficulty_level} • Memory system active</div>
                </div>

                <div class="memory-layer">
                    <div class="layer-title">Conversation</div>
                    <div class="layer-content">Ready for enhanced learning session • Real-time context assembly enabled</div>
                </div>

                <div class="memory-layer">
                    <div class="layer-title">Prior Knowledge</div>
                    <div class="layer-content">${memoryData.memory_layers.prior_knowledge?.summary || 'Cross-module connections available'}</div>
                </div>
            `;
        }

        function displayInitialChatMessage() {
            const chatMessages = document.getElementById('chat-messages');
            chatMessages.innerHTML = `
                <div class="message ai">
                    Hello ${currentUser.name}! I can see from your learning profile that you're working on "${currentModule.title}". 
                    <br><br>
                    I'm your AI tutor powered by a 4-layer memory system that remembers your learning style, tracks your progress, and connects concepts across modules.
                    <br><br>
                    Let's continue exploring communication concepts. What questions do you have about perception and the "four worlds" we discussed earlier?
                </div>
            `;
            scrollChatToBottom();
        }

        async function sendMessage() {
            const input = document.getElementById('chat-input');
            const message = input.value.trim();
            if (!message) return;

            // Add user message to chat
            const chatMessages = document.getElementById('chat-messages');
            const userMessage = document.createElement('div');
            userMessage.className = 'message user';
            userMessage.textContent = message;
            chatMessages.appendChild(userMessage);
            
            input.value = '';
            scrollChatToBottom();

            try {
                // Send to enhanced chat endpoint
                const response = await fetch(`${API_BASE}/chat/enhanced`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        module_id: currentModule.id,
                        message: message
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    
                    // Add AI response
                    const aiMessage = document.createElement('div');
                    aiMessage.className = 'message ai';
                    aiMessage.innerHTML = data.reply;
                    chatMessages.appendChild(aiMessage);
                    
                    // Update memory layers if provided
                    if (data.memory_context) {
                        displayMemoryLayers(data.memory_context);
                    }
                    
                    scrollChatToBottom();
                } else {
                    throw new Error('Chat request failed');
                }
            } catch (error) {
                console.error('Chat error:', error);
                const errorMessage = document.createElement('div');
                errorMessage.className = 'message ai';
                errorMessage.innerHTML = 'I apologize, but I\'m having trouble connecting right now. Please try again.';
                chatMessages.appendChild(errorMessage);
                scrollChatToBottom();
            }
        }

        function scrollChatToBottom() {
            const chatMessages = document.querySelector('.chat-messages');
            if (chatMessages) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // Memory System Functions
        async function loadMemorySystem() {
            if (!currentModule) return;

            try {
                const response = await fetch(`${API_BASE}/onboarding/memory-config`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                if (response.ok) {
                    const memoryConfig = await response.json();
                    displayMemoryVisualization(memoryConfig);
                }
            } catch (error) {
                console.error('Memory system loading error:', error);
            }
        }

        function displayMemoryVisualization(memoryConfig) {
            const memoryView = document.getElementById('memory-detailed-view');
            const config = memoryConfig.memory_config;

            memoryView.innerHTML = `
                <div class="layer-detailed">
                    <div class="layer-header">
                        <div class="layer-number">1</div>
                        <div class="layer-detailed-title">User Learning Profile</div>
                    </div>
                    <div class="layer-detailed-content">
                        <strong>Learning Style:</strong> ${config.user_profile.learning_style}<br>
                        <strong>Preferred Pace:</strong> ${config.user_profile.preferred_pace}<br>
                        <strong>Goals:</strong> ${config.user_profile.goals}<br>
                        <strong>Background:</strong> ${config.user_profile.background}
                        <br><br>
                        This layer ensures personalized tutoring approaches across all modules based on your actual survey responses stored in the database.
                    </div>
                </div>

                <div class="layer-detailed">
                    <div class="layer-header">
                        <div class="layer-number">2</div>
                        <div class="layer-detailed-title">Module-Specific Context</div>
                    </div>
                    <div class="layer-detailed-content">
                        <strong>Current Module:</strong> "${currentModule.title}"<br>
                        <strong>Progress:</strong> ${currentModule.user_progress.completion_percentage.toFixed(1)}% complete<br>
                        <strong>Objectives Completed:</strong> ${currentModule.user_progress.objectives_completed} of ${currentModule.user_progress.total_objectives}<br>
                        <strong>Teaching Mode:</strong> Socratic methodology active
                        <br><br>
                        Adapts questioning strategies based on module complexity and your actual progress from database records.
                    </div>
                </div>

                <div class="layer-detailed">
                    <div class="layer-header">
                        <div class="layer-number">3</div>
                        <div class="layer-detailed-title">Real-Time Conversation</div>
                    </div>
                    <div class="layer-detailed-content">
                        <strong>Total Messages:</strong> ${currentModule.user_progress.messages_count}<br>
                        <strong>Conversations:</strong> ${currentModule.user_progress.conversations_count}<br>
                        <strong>Time Engaged:</strong> ${currentModule.user_progress.time_spent_minutes} minutes<br>
                        <strong>Mastery Level:</strong> ${currentModule.user_progress.mastery_level}
                        <br><br>
                        Active conversation analysis including your actual engagement patterns, learning breakthrough moments, and real progress tracking.
                    </div>
                </div>

                <div class="layer-detailed">
                    <div class="layer-header">
                        <div class="layer-number">4</div>
                        <div class="layer-detailed-title">Cross-Module Knowledge</div>
                    </div>
                    <div class="layer-detailed-content">
                        <strong>Connections Available:</strong> Communication theory foundations<br>
                        <strong>Transfer Opportunities:</strong> Ready for advanced perception concepts<br>
                        <strong>Knowledge Building:</strong> Module sequence optimized for learning<br>
                        <strong>Memory Summaries:</strong> Stored in database for future reference
                        <br><br>
                        Prevents repetition while reinforcing foundational understanding across the 15-module curriculum using real memory summaries.
                    </div>
                </div>
            `;
        }

        // Progress Analytics Functions
        async function loadProgressAnalytics() {
            if (!currentModule) return;

            document.getElementById('progress-loading').style.display = 'block';
            document.getElementById('progress-content').style.display = 'none';

            try {
                const response = await fetch(`${API_BASE}/progress/${currentModule.id}`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                if (response.ok) {
                    const progressData = await response.json();
                    displayProgressAnalytics(progressData);
                    
                    document.getElementById('progress-loading').style.display = 'none';
                    document.getElementById('progress-content').style.display = 'block';
                }
            } catch (error) {
                console.error('Progress loading error:', error);
                document.getElementById('progress-loading').innerHTML = `
                    <p style="color: #dc2626;">Failed to load progress data</p>
                    <button onclick="loadProgressAnalytics()" style="margin-top: 10px; padding: 8px 16px; background: #2563eb; color: white; border: none; border-radius: 4px; cursor: pointer;">Retry</button>
                `;
            }
        }

        function displayProgressAnalytics(progressData) {
            // Overview cards
            const overview = document.getElementById('progress-overview');
            overview.innerHTML = `
                <div class="progress-card">
                    <div class="progress-number">${progressData.completion_percentage.toFixed(0)}%</div>
                    <div class="progress-label-large">Module Complete</div>
                    <span class="status-indicator real-data" style="margin-top: 8px; font-size: 0.7em;">From DB</span>
                </div>

                <div class="progress-card">
                    <div class="progress-number">${progressData.total_messages}</div>
                    <div class="progress-label-large">Messages Exchanged</div>
                    <span class="status-indicator real-data" style="margin-top: 8px; font-size: 0.7em;">Real Count</span>
                </div>

                <div class="progress-card">
                    <div class="progress-number">${progressData.time_spent_minutes}</div>
                    <div class="progress-label-large">Minutes Learning</div>
                    <span class="status-indicator real-data" style="margin-top: 8px; font-size: 0.7em;">Calculated</span>
                </div>

                <div class="progress-card">
                    <div class="progress-number">${progressData.objectives_completed.length}</div>
                    <div class="progress-label-large">Concepts Mastered</div>
                    <span class="status-indicator real-data" style="margin-top: 8px; font-size: 0.7em;">Memory DB</span>
                </div>
            `;

            // Detailed progress
            const detailed = document.getElementById('detailed-progress');
            const allObjectives = [...progressData.objectives_completed, ...progressData.objectives_in_progress, ...progressData.objectives_not_started];
            
            let objectiveHTML = '';
            allObjectives.forEach((objective, index) => {
                let status, color, progress;
                
                if (progressData.objectives_completed.includes(objective)) {
                    status = '✓ Completed';
                    color = '#059669';
                    progress = 100;
                } else if (progressData.objectives_in_progress.includes(objective)) {
                    status = 'In Progress';
                    color = '#2563eb';
                    progress = 75;
                } else {
                    status = 'Not Started';
                    color = '#666';
                    progress = 0;
                }

                objectiveHTML += `
                    <div style="margin-bottom: 25px;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                            <span style="font-weight: 500;">${objective}</span>
                            <span style="color: ${color}; font-weight: 600;">${status}</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%; background: ${color};"></div>
                        </div>
                    </div>
                `;
            });

            detailed.innerHTML = `
                <h4 class="detailed-title">Learning Objectives Progress 
                    <span class="status-indicator real-data">Live Data</span>
                </h4>
                ${objectiveHTML}
                
                <div style="margin-top: 30px; padding: 20px; background: #f8fafc; border-radius: 8px; border: 1px solid #e5e5e5;">
                    <h5 style="margin-bottom: 15px; color: #1a1a1a;">Learning Insights</h5>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        <div>
                            <strong>Engagement Level:</strong><br>
                            <span style="text-transform: capitalize; color: #2563eb;">${progressData.learning_insights.engagement_level}</span>
                        </div>
                        <div>
                            <strong>Learning Pace:</strong><br>
                            <span style="text-transform: capitalize; color: #2563eb;">${progressData.learning_insights.learning_pace}</span>
                        </div>
                        <div>
                            <strong>Session Length:</strong><br>
                            <span style="color: #2563eb;">${progressData.learning_insights.average_session_length} min avg</span>
                        </div>
                    </div>
                    
                    ${progressData.recent_activity.length > 0 ? `
                        <h6 style="margin: 20px 0 10px 0; color: #1a1a1a;">Recent Learning Sessions:</h6>
                        ${progressData.recent_activity.map(activity => `
                            <div style="background: white; padding: 10px; border-radius: 4px; margin-bottom: 8px; border: 1px solid #e5e5e5;">
                                <strong>${activity.title}</strong> - ${activity.date} ${activity.time}<br>
                                <span style="color: #666; font-size: 0.9em;">${activity.message_count} messages, ${activity.duration_minutes} min</span>
                            </div>
                        `).join('')}
                    ` : ''}
                </div>
            `;
        }

        // Event Listeners
        document.getElementById('auth-form').addEventListener('submit', handleAuth);
        document.getElementById('chat-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Auto-scroll chat to bottom
        setTimeout(scrollChatToBottom, 100);
